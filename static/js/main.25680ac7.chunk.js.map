{"version":3,"sources":["Navbar.jsx","Footer.jsx","Home.jsx","Gathering.jsx","Buildings.jsx","Gyms.jsx","App.js","registerServiceWorker.js","index.js"],"names":["MyNavbar","react_default","a","createElement","Navbar","inverse","collapseOnSelect","staticTop","Header","Brand","Link","to","Toggle","Collapse","Nav","NavItem","componentClass","eventKey","href","active","this","props","location","Component","Footer","Home","Navbar_MyNavbar","pathname","Grid","Jumbotron","Row","Col","md","className","role","Footer_Footer","window","jQuery","$","require","Gathering","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","data","gatheringRateByType","field","rocks","woods","richVein","ruins","gatheringRateByLevel","1","2","3","4","5","tileMaxCapacityByType","defaults","JSON","parse","localStorage","getItem","gathering-speed-bonus","gathering-tile-type","gathering-tile-level","computeGatheringMaxCapacity","computeGatheringTime","state","objectSpread","handleChange","bind","assertThisInitialized","selectAll","handleClick","getCapacityValidationState","gatheringCapacity","gatheringSpeedBonus","gatheringTileType","gatheringTileLevel","convertSecondsToText","gatheringTime","convertTextToSeconds","seconds","Math","ceil","h","floor","m","s","text","matches","exec","Inputmask","mask","document","querySelectorAll","nextProps","nextState","setItem","stringify","event","target","id","setState","value","gathering-time","maxCapacity","console","log","concat","gathering-capacity","gathering-tile-max-capacity","min","computeGatheringCapacity","select","dif","Form","horizontal","FormGroup","controlId","ControlLabel","sm","InputGroup","Addon","FormControl","type","onChange","onFocus","data-inputmask-alias","data-inputmask-autogroup","data-inputmask-unmaskasnumber","data-inputmask-min","data-inputmask-placeholder","data-inputmask-rightalign","validationState","max","Button","onClick","data-inputmask-inputformat","Glyphicon","glyph","Buildings","materials","prison","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","battleHall","altar","treasureTrove","gems","100","1000","buildings","buildingNames","resourceNames","level","split","levelOrMaterial","building","update","defineProperty","$set","_this2","formGroups","totalUsedGems","totalRemainingGems","forEach","i","usedAndOwned","usedGems","remainingGems","levels","keys","map","parseInt","sort","b","materialPacks","used","remaining","owned","usedGemsExplanation","remainingGemsExplanation","calcGems","explanation","_this3","push","amount","quantity","key","disabled","OverlayTrigger","placement","trigger","rootClose","overlay","Popover","title","style","cursor","Panel","Heading","Title","Body","Gyms","time","empty","grey","green","blue","purple","gold","exp","colors","iterations","expBoost","timeBoost","convertMinutesToText","heroes","monsters","optimalGym","minutes","round","length","nGyms","allHeroes","clone","countHeroes","reduce","acc","color","sumTime","compare","difHeroes","difTime","branch","node","nodes","find","_loop","newNode","monster","total","heuristicHeroes","heuristicTime","hash","getHash","visitedNodes","minHeroes","Number","MAX_VALUE","maxHeroes","MIN_VALUE","minTime","maxTime","_this4","c","queue","PriorityQueue","comparator","totalHeroes","s0","nMon","best","dequeue","n","_this5","calcMonsterExpH","calcMonsterExp","convertTextToMinutes","gyms","_loop2","totalExpH","listGroupItems","ListGroup","ListGroupItem","App","BrowserRouter","basename","process","Switch","Route","exact","path","component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","src_App_0","getElementById","URL","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.25680ac7.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {Nav, Navbar, NavItem} from 'react-bootstrap';\nimport {Link} from 'react-router-dom';\n\nexport default class MyNavbar extends Component {\n    render() {\n        return (\n            <Navbar inverse collapseOnSelect staticTop>\n                <Navbar.Header>\n                    <Navbar.Brand>\n                        <Link to=\"/\">Home</Link>\n                    </Navbar.Brand>\n                    <Navbar.Toggle />\n                </Navbar.Header>\n                <Navbar.Collapse>\n                    <Nav>\n                        <NavItem componentClass={Link} eventKey={1} to=\"/gathering\" href=\"/gathering\" active={this.props.location === '/gathering'}>Gathering</NavItem>\n                        <NavItem componentClass={Link} eventKey={2} to=\"/buildings\" href=\"/buildings\" active={this.props.location === '/buildings'}>Buildings</NavItem>\n                        <NavItem componentClass={Link} eventKey={3} to=\"/gyms\" href=\"/gyms\" active={this.props.location === '/gyms'}>Gyms</NavItem>\n                    </Nav>\n                </Navbar.Collapse>\n            </Navbar>\n        );\n    }\n};","import React, { Component } from 'react';\nexport default class Footer extends Component {\n    render() {\n        return (\n            <div>\n                <hr />\n\n                <footer>\n                    <p>Made with &lt;3 by Nerestaren aka Minatoni</p>\n                </footer>\n            </div>\n        );\n    }\n};","import React, { Component } from 'react';\r\nimport {Col, Grid, Jumbotron, Row} from 'react-bootstrap';\r\nimport {Link} from 'react-router-dom';\r\nimport Navbar from './Navbar';\r\nimport Footer from './Footer';\r\n\r\nexport default class Home extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Navbar location={this.props.location.pathname}/>\r\n                <Grid>\r\n                    <Jumbotron>\r\n                        <h1>Lords mobile</h1>\r\n                        <p>Some tools for peasants.</p>\r\n                    </Jumbotron>\r\n                    <Row>\r\n                        <Col md={4}>\r\n                            <h2>Gathering calculator</h2>\r\n                            <p>Time to complete a node, amount of resources gathered in an amount of time.</p>\r\n                            <p><Link className=\"btn btn-default\" to=\"/gathering\" role=\"button\">View details »</Link></p>\r\n                        </Col>\r\n                        <Col md={4}>\r\n                            <h2>Advanced buildings</h2>\r\n                            <p>Gems needed to upgrade your Prison, Battle Hall, Altar and Treasure Trove.</p>\r\n                            <p><Link className=\"btn btn-default\" to=\"/buildings\" role=\"button\">View details »</Link></p>\r\n                        </Col>\r\n                        <Col md={4}>\r\n                            <h2>Gyms</h2>\r\n                            <p>How many gyms should you build?</p>\r\n                            <p><Link className=\"btn btn-default\" to=\"/gyms\" role=\"button\">View details »</Link></p>\r\n                        </Col>\r\n                    </Row>\r\n                    <Footer />\r\n                </Grid>\r\n            </div>\r\n        );\r\n    }\r\n};","import React, {Component} from 'react';\r\nimport {Button, Col, ControlLabel, Form, FormControl, FormGroup, Glyphicon, Grid, InputGroup} from 'react-bootstrap';\r\n\r\nimport Navbar from './Navbar';\r\nimport Footer from './Footer';\r\n\r\nimport Inputmask from 'inputmask';\r\n\r\nimport $ from 'jquery';\r\n\r\nwindow.jQuery = window.$ = $;\r\nrequire('bootstrap');\r\nrequire('bootstrap-timepicker');\r\n\r\nexport default class Gathering extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.data = {\r\n            gatheringRateByType: {      // Amount of rss per second at lvl 1\r\n                field: 24,\r\n                rocks: 16,\r\n                woods: 16,\r\n                richVein: 16,\r\n                ruins: 8.75\r\n            },\r\n            gatheringRateByLevel: {     // Rate of rss per second at different levels\r\n                1: 1,\r\n                2: 1.5,\r\n                3: 2,\r\n                4: 3,\r\n                5: 4\r\n            },\r\n            tileMaxCapacityByType: {    // Max capacity at different tile levels (no formula available)\r\n                field: [0, 225000, 412500, 900000, 1575000, 4125000],   // 1, 1.8333, 4, 7, 18.3333\r\n                rocks: [0, 180000, 330000, 720000, 1260000, 3300000],   // 1, 1.8333, 4, 7, 18.3333\r\n                woods: [0, 180000, 330000, 720000, 1260000, 3300000],  // 1, 1.8333, 4, 7, 18.3333\r\n                richVein: [0, 135000, 247500, 540000, 945000, 2475000], // 1, 1.8333, 4, 7, 18.3333\r\n                ruins: [0, 67500, 123500, 270000, 472500, 1462500]      // 1, 1.8296, 4, 7, 21.6667 <- weird\r\n            }\r\n        };\r\n        let defaults = JSON.parse(localStorage.getItem('gathering'));\r\n        if (defaults === null) {\r\n            defaults = {\r\n                'gathering-speed-bonus': 0,\r\n                'gathering-tile-type': 'field',\r\n                'gathering-tile-level': 1\r\n            };\r\n            defaults['gathering-capacity'] = defaults['gathering-tile-max-capacity'] = this.computeGatheringMaxCapacity(defaults['gathering-tile-type'], defaults['gathering-tile-level']);\r\n            defaults['gathering-time'] = this.computeGatheringTime(defaults['gathering-capacity'], defaults['gathering-speed-bonus'], defaults['gathering-tile-type'], defaults['gathering-tile-level']);\r\n        }\r\n        this.state = {...defaults};\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.selectAll = this.selectAll.bind(this);\r\n        this.handleClick = this.handleClick.bind(this);\r\n        this.getCapacityValidationState = this.getCapacityValidationState.bind(this);\r\n    }\r\n\r\n    computeGatheringTime(gatheringCapacity, gatheringSpeedBonus, gatheringTileType, gatheringTileLevel) {\r\n        // time = capacity / (speed * rate by tile type * rate by tile level)\r\n        return this.convertSecondsToText(gatheringCapacity / (\r\n            (1 + gatheringSpeedBonus / 100) *\r\n            this.data.gatheringRateByType[gatheringTileType] *\r\n            this.data.gatheringRateByLevel[gatheringTileLevel]\r\n        ));\r\n    }\r\n\r\n    computeGatheringMaxCapacity(gatheringTileType, gatheringTileLevel) {\r\n        return this.data.tileMaxCapacityByType[gatheringTileType][gatheringTileLevel];\r\n    }\r\n\r\n    computeGatheringCapacity(gatheringSpeedBonus, gatheringTileType, gatheringTileLevel, gatheringTime) {\r\n        // capacity = speed * rate by tile type * rate by tile level * time\r\n        return (1 + gatheringSpeedBonus / 100) *\r\n            this.data.gatheringRateByType[gatheringTileType] *\r\n            this.data.gatheringRateByLevel[gatheringTileLevel] *\r\n            this.convertTextToSeconds(gatheringTime);\r\n    }\r\n\r\n    convertSecondsToText(seconds) {\r\n        seconds = Math.ceil(seconds);\r\n        let h = Math.floor(seconds / 3600);\r\n        seconds -= h * 3600;\r\n        let m = Math.floor(seconds / 60);\r\n        seconds -= m * 60;\r\n        let s = seconds;\r\n\r\n        if (h < 10) h = '0' + h;\r\n        if (m < 10) m = '0' + m;\r\n        if (s < 10) s = '0' + s;\r\n\r\n        return h + ':' + m + ':' + s;\r\n    }\r\n\r\n    convertTextToSeconds(text) {\r\n        let matches = /(\\d+):(\\d{2}):(\\d{2})/.exec(text);\r\n        if (matches) {\r\n            return matches[1] * 3600 + matches[2] * 60 + matches[3] * 1;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        Inputmask().mask(document.querySelectorAll(\"input\"));\r\n    }\r\n\r\n    componentWillUpdate(nextProps, nextState) {\r\n        localStorage.setItem('gathering', JSON.stringify(nextState));\r\n    }\r\n\r\n    handleChange(event) {\r\n        switch (event.target.id) {\r\n            case 'gathering-speed-bonus':\r\n                // gathering-speed-bonus -> gathering-time\r\n                this.setState({\r\n                    'gathering-speed-bonus': event.target.value,\r\n                    'gathering-time': this.computeGatheringTime(\r\n                        this.state['gathering-capacity'],\r\n                        event.target.value,\r\n                        this.state['gathering-tile-type'],\r\n                        this.state['gathering-tile-level']\r\n                    )\r\n                });\r\n                break;\r\n            case 'gathering-tile-type': {\r\n                // gathering-tile-level -> gathering-tile-max-capacity -> gathering-capacity -> gathering-time\r\n                let maxCapacity = this.computeGatheringMaxCapacity(event.target.value, this.state['gathering-tile-level']);\r\n                let gatheringCapacity = maxCapacity;\r\n                console.log(`Using (max)-capacity ${maxCapacity}`);\r\n                this.setState({\r\n                    'gathering-tile-type': event.target.value,\r\n                    'gathering-capacity': gatheringCapacity,\r\n                    'gathering-tile-max-capacity': maxCapacity,\r\n                    'gathering-time': this.computeGatheringTime(\r\n                        gatheringCapacity,\r\n                        this.state['gathering-speed-bonus'],\r\n                        event.target.value,\r\n                        this.state['gathering-tile-level']\r\n                    )\r\n                });\r\n                break;\r\n            }\r\n            case 'gathering-tile-level': {\r\n                // gathering-tile-level -> gathering-tile-max-capacity -> gathering-capacity -> gathering-time\r\n                let maxCapacity = this.computeGatheringMaxCapacity(this.state['gathering-tile-type'], event.target.value);\r\n                let gatheringCapacity = maxCapacity;\r\n                console.log(`Using (max)-capacity ${maxCapacity}`);\r\n                this.setState({\r\n                    'gathering-tile-level': event.target.value,\r\n                    'gathering-capacity': gatheringCapacity,\r\n                    'gathering-tile-max-capacity': maxCapacity,\r\n                    'gathering-time': this.computeGatheringTime(\r\n                        gatheringCapacity,\r\n                        this.state['gathering-speed-bonus'],\r\n                        this.state['gathering-tile-type'],\r\n                        event.target.value\r\n                    )\r\n                });\r\n                break;\r\n            }\r\n            case 'gathering-capacity': {\r\n                // gathering-capacity -> gathering-time\r\n                let gatheringCapacity = Math.min(event.target.value, this.state['gathering-tile-max-capacity']);\r\n                this.setState({\r\n                    'gathering-capacity': gatheringCapacity,\r\n                    'gathering-time': this.computeGatheringTime(\r\n                        gatheringCapacity,\r\n                        this.state['gathering-speed-bonus'],\r\n                        this.state['gathering-tile-type'],\r\n                        this.state['gathering-tile-level']\r\n                    )\r\n                });\r\n                break;\r\n            }\r\n            case 'gathering-time':\r\n                // gathering-time -> gathering-capacity\r\n                this.setState({\r\n                    'gathering-capacity': this.computeGatheringCapacity(\r\n                        this.state['gathering-speed-bonus'],\r\n                        this.state['gathering-tile-type'],\r\n                        this.state['gathering-tile-level'],\r\n                        event.target.value\r\n                    ),\r\n                    'gathering-time': event.target.value\r\n                });\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    selectAll(event) {\r\n        event.target.select();\r\n    }\r\n\r\n    handleClick(event) {\r\n        switch (event.target.id) {\r\n            case 'gathering-set-max-capacity':\r\n                // gathering-capacity -> gathering-time\r\n                let gatheringCapacity = this.state['gathering-tile-max-capacity']\r\n                this.setState({\r\n                    'gathering-capacity': gatheringCapacity,\r\n                    'gathering-time': this.computeGatheringTime(\r\n                        gatheringCapacity,\r\n                        this.state['gathering-speed-bonus'],\r\n                        this.state['gathering-tile-type'],\r\n                        this.state['gathering-tile-level']\r\n                    )\r\n                });\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    getCapacityValidationState() {\r\n        let dif = this.state['gathering-tile-max-capacity'] - this.state['gathering-capacity'];\r\n        if (dif > 0) {\r\n            return 'warning';\r\n        } else if (dif === 0) {\r\n            return 'success';\r\n        } else {\r\n            return 'error';\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Navbar location={this.props.location.pathname}/>\r\n                <Grid>\r\n                    <Form horizontal>\r\n                        <FormGroup controlId=\"gathering-speed-bonus\">\r\n                            <Col componentClass={ControlLabel} sm={2}>\r\n                                Speed bonus\r\n                            </Col>\r\n                            <Col sm={10}>\r\n                                <InputGroup>\r\n                                    <InputGroup.Addon>+</InputGroup.Addon>\r\n                                    <FormControl type=\"text\" value={this.state['gathering-speed-bonus']}\r\n                                                 onChange={this.handleChange} onFocus={this.selectAll}\r\n                                                 data-inputmask-alias=\"numeric\"\r\n                                                 data-inputmask-autogroup=\"true\"\r\n                                                 data-inputmask-unmaskasnumber=\"true\"\r\n                                                 data-inputmask-min=\"0\"\r\n                                                 data-inputmask-placeholder=\"0\"\r\n                                                 data-inputmask-rightalign=\"false\"/>\r\n                                    <InputGroup.Addon>%</InputGroup.Addon>\r\n                                </InputGroup>\r\n                            </Col>\r\n                        </FormGroup>\r\n                        <FormGroup controlId=\"gathering-tile-type\">\r\n                            <Col componentClass={ControlLabel} sm={2}>\r\n                                Tile type\r\n                            </Col>\r\n                            <Col sm={10}>\r\n                                <FormControl componentClass=\"select\" value={this.state['gathering-tile-type']}\r\n                                             onChange={this.handleChange}>\r\n                                    <option value=\"field\">Field</option>\r\n                                    <option value=\"rocks\">Rocks</option>\r\n                                    <option value=\"woods\">Woods</option>\r\n                                    <option value=\"richVein\">Rich Vein</option>\r\n                                    <option value=\"ruins\">Ruins</option>\r\n                                </FormControl>\r\n                            </Col>\r\n                        </FormGroup>\r\n                        <FormGroup controlId=\"gathering-tile-level\">\r\n                            <Col componentClass={ControlLabel} sm={2}>\r\n                                Tile level\r\n                            </Col>\r\n                            <Col sm={10}>\r\n                                <FormControl componentClass=\"select\" value={this.state['gathering-tile-level']}\r\n                                             onChange={this.handleChange}>\r\n                                    <option value=\"1\">1</option>\r\n                                    <option value=\"2\">2</option>\r\n                                    <option value=\"3\">3</option>\r\n                                    <option value=\"4\">4</option>\r\n                                    <option value=\"5\">5</option>\r\n                                </FormControl>\r\n                            </Col>\r\n                        </FormGroup>\r\n                        <FormGroup controlId=\"gathering-capacity\" validationState={this.getCapacityValidationState()}>\r\n                            <Col componentClass={ControlLabel} sm={2}>\r\n                                Tile capacity\r\n                            </Col>\r\n                            <Col sm={10}>\r\n                                <InputGroup>\r\n                                    <FormControl type=\"text\" value={this.state['gathering-capacity']} min=\"0\" max={this.state['gathering-tile-max-capacity']}\r\n                                                 onChange={this.handleChange} onFocus={this.selectAll}\r\n                                                 data-inputmask-alias=\"integer\"\r\n                                                 data-inputmask-autogroup=\"true\"\r\n                                                 data-inputmask-unmaskasnumber=\"true\"\r\n                                                 data-inputmask-placeholder=\"0\"\r\n                                                 data-inputmask-rightalign=\"false\"/>\r\n                                    <InputGroup.Addon> / {this.state['gathering-tile-max-capacity']}</InputGroup.Addon>\r\n                                    <InputGroup.Button>\r\n                                        <Button id=\"gathering-set-max-capacity\" onClick={this.handleClick}>All</Button>\r\n                                    </InputGroup.Button>\r\n                                </InputGroup>\r\n                            </Col>\r\n                        </FormGroup>\r\n                        <FormGroup controlId=\"gathering-time\">\r\n                            <Col componentClass={ControlLabel} sm={2}>\r\n                                Time\r\n                            </Col>\r\n                            <Col sm={10}>\r\n                                <InputGroup>\r\n                                    <FormControl type=\"text\" value={this.state['gathering-time']}\r\n                                                 onChange={this.handleChange}\r\n                                                 data-inputmask-alias=\"datetime\"\r\n                                                 data-inputmask-inputformat=\"HHH:MM:ss\"\r\n                                                 data-inputmask-placeholder=\"0\"/>\r\n                                    <InputGroup.Addon>\r\n                                        <Glyphicon glyph=\"time\"/>\r\n                                    </InputGroup.Addon>\r\n                                </InputGroup>\r\n                            </Col>\r\n                        </FormGroup>\r\n                    </Form>\r\n                    <Footer/>\r\n                </Grid>\r\n            </div>\r\n        );\r\n    }\r\n};","//TODO en canviar estat, el label no surt on toca\r\n\r\nimport React, {Component} from 'react';\r\nimport {\r\n    Col,\r\n    ControlLabel,\r\n    Form,\r\n    FormControl,\r\n    FormGroup,\r\n    Glyphicon,\r\n    Grid,\r\n    InputGroup, OverlayTrigger, Panel, Popover, Row\r\n} from 'react-bootstrap';\r\nimport update from 'immutability-helper';\r\n\r\nimport Navbar from './Navbar';\r\nimport Footer from './Footer';\r\n\r\nimport $ from 'jquery';\r\n\r\nwindow.jQuery = window.$ = $;\r\nrequire('bootstrap');\r\nrequire('bootstrap-timepicker');\r\n\r\nexport default class Buildings extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.data = {\r\n            materials: {\r\n                prison: {\r\n                    1: 1,\r\n                    2: 2,\r\n                    3: 5,\r\n                    4: 12,\r\n                    5: 20,\r\n                    6: 30,\r\n                    7: 45,\r\n                    8: 60,\r\n                    9: 85,\r\n                    10: 100,\r\n                    11: 120,\r\n                    12: 150,\r\n                    13: 180,\r\n                    14: 250,\r\n                    15: 340,\r\n                    16: 500,\r\n                    17: 700,\r\n                    18: 900,\r\n                    19: 1200,\r\n                    20: 1500,\r\n                    21: 1800,\r\n                    22: 2100,\r\n                    23: 2400,\r\n                    24: 3000,\r\n                    25: 4500\r\n                },\r\n                battleHall: {\r\n                    1: 1,\r\n                    2: 2,\r\n                    3: 5,\r\n                    4: 12,\r\n                    5: 20,\r\n                    6: 30,\r\n                    7: 45,\r\n                    8: 60,\r\n                    9: 85,\r\n                    10: 100,\r\n                    11: 120,\r\n                    12: 150,\r\n                    13: 180,\r\n                    14: 250,\r\n                    15: 340,\r\n                    16: 500,\r\n                    17: 700,\r\n                    18: 900,\r\n                    19: 1200,\r\n                    20: 1500,\r\n                    21: 1800,\r\n                    22: 2100,\r\n                    23: 2400,\r\n                    24: 3000,\r\n                    25: 4500\r\n                },\r\n                altar: {\r\n                    1: 1,\r\n                    2: 2,\r\n                    3: 5,\r\n                    4: 12,\r\n                    5: 20,\r\n                    6: 30,\r\n                    7: 45,\r\n                    8: 60,\r\n                    9: 85,\r\n                    10: 100,\r\n                    11: 120,\r\n                    12: 150,\r\n                    13: 180,\r\n                    14: 250,\r\n                    15: 340,\r\n                    16: 500,\r\n                    17: 700,\r\n                    18: 900,\r\n                    19: 1200,\r\n                    20: 1500,\r\n                    21: 1800,\r\n                    22: 2100,\r\n                    23: 2400,\r\n                    24: 3000,\r\n                    25: 4500\r\n                },\r\n                treasureTrove: {\r\n                    1: 0, 2: 5, 3: 25, 4: 55, 5: 75, 6: 145, 7: 295, 8: 900, 9: 3500\r\n                }\r\n            },\r\n            gems: {\r\n                prison: {\r\n                    1: 15,\r\n                    10: 120,\r\n                    100: 1100,\r\n                    1000: 10000\r\n                },\r\n                battleHall: {\r\n                    1: 15,\r\n                    10: 120,\r\n                    100: 1100,\r\n                    1000: 10000\r\n                },\r\n                altar: {\r\n                    1: 15,\r\n                    10: 120,\r\n                    100: 1100,\r\n                    1000: 10000\r\n                },\r\n                treasureTrove: {\r\n                    1: 20,\r\n                    10: 160,\r\n                    100: 1500,\r\n                    1000: 14000\r\n                }\r\n            },\r\n            buildings: ['prison', 'battleHall', 'altar', 'treasureTrove'],\r\n            buildingNames: {\r\n                prison: 'Prison',\r\n                battleHall: 'Battle Hall',\r\n                altar: 'Altar',\r\n                treasureTrove: 'Treasure Trove'\r\n            },\r\n            resourceNames: {\r\n                prison: 'Steel Cuffs',\r\n                battleHall: 'War Tomes',\r\n                altar: 'Soul Crystals',\r\n                treasureTrove: 'Crystal Pickaxes'\r\n            }\r\n        };\r\n        let defaults = JSON.parse(localStorage.getItem('buildings'));\r\n        if (defaults === null) {\r\n            defaults = {\r\n                level: {\r\n                    prison: 0,\r\n                    battleHall: 0,\r\n                    altar: 0,\r\n                    treasureTrove: 0\r\n                },\r\n                materials: {\r\n                    prison: 0,\r\n                    battleHall: 0,\r\n                    altar: 0,\r\n                    treasureTrove: 0\r\n                }\r\n            };\r\n        }\r\n        this.state = {...defaults};\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.selectAll = this.selectAll.bind(this);\r\n    }\r\n\r\n    componentWillUpdate(nextProps, nextState) {\r\n        localStorage.setItem('buildings', JSON.stringify(nextState));\r\n    }\r\n\r\n    handleChange(event) {\r\n        let id = event.target.id.split('-');\r\n        let levelOrMaterial = id[1];\r\n        let building = id[0];\r\n\r\n        this.setState(update(this.state, {\r\n            [levelOrMaterial]: {\r\n                [building]: {\r\n                    $set: +event.target.value\r\n                }\r\n            }\r\n        }));\r\n    }\r\n\r\n    selectAll(event) {\r\n        event.target.select();\r\n    }\r\n\r\n    render() {\r\n        let formGroups = [];\r\n        let totalUsedGems = 0;\r\n        let totalRemainingGems = 0;\r\n\r\n        this.data.buildings.forEach((id, i) => {\r\n            let levels = Object.keys(this.data.materials[id]).map(a => parseInt(a, 10)).sort((a, b) => a - b);\r\n            let materialPacks = Object.keys(this.data.gems[id]).map(a => parseInt(a, 10)).sort((a, b) => b - a);\r\n            let used = 0;\r\n            let remaining = 0;\r\n            let owned = this.state.materials[id];\r\n            let usedAndOwned = 0;\r\n\r\n            let usedGems;\r\n            let remainingGems;\r\n            let usedGemsExplanation = [];\r\n            let remainingGemsExplanation = [];\r\n\r\n            // Calculate used and remaining materials\r\n            levels.forEach(level => {\r\n                if (this.state.level[id] >= level) {\r\n                    used += this.data.materials[id][level];\r\n                } else {\r\n                    remaining += this.data.materials[id][level];\r\n                }\r\n            });\r\n            usedAndOwned = used + owned;\r\n            remaining -= owned;\r\n\r\n            // Calculate used and remaining gems\r\n            let calcGems = function(materials, explanation) {\r\n                let gems = 0;\r\n                if (materials === 9 && this.data.gems[id][1] * 9 > this.data.gems[id][10]) {\r\n                    // Better to buy 1x 10 pack than 9x 1 packs\r\n                    gems += this.data.gems[id][10];\r\n                    explanation.push(<li>1&times;10</li>)\r\n                } else {\r\n                    materialPacks.forEach(amount => {\r\n                        if (amount <= materials) {\r\n                            let quantity = Math.floor(materials / amount);\r\n                            gems += this.data.gems[id][amount] * quantity;\r\n                            explanation.push(<li key={amount}>{quantity}&times;{amount}</li>);\r\n                            materials -= amount * quantity;\r\n                        }\r\n                    });\r\n                }\r\n                return gems;\r\n            }.bind(this);\r\n\r\n            usedGems = calcGems(usedAndOwned, usedGemsExplanation);\r\n            remainingGems = calcGems(remaining, remainingGemsExplanation);\r\n\r\n            totalUsedGems += usedGems;\r\n            totalRemainingGems += remainingGems;\r\n\r\n            if (usedGems === 0) {\r\n                usedGemsExplanation = 'No used gems';\r\n            } else {\r\n                usedGemsExplanation = <ul>{usedGemsExplanation}</ul>;\r\n            }\r\n            if (remainingGems === 0) {\r\n                remainingGemsExplanation = 'No remaining gems';\r\n            } else {\r\n                remainingGemsExplanation = <ul>{remainingGemsExplanation}</ul>;\r\n            }\r\n\r\n            formGroups.push(<div key={id}>\r\n                <h3>{this.data.buildingNames[id]}</h3>\r\n                <FormGroup>\r\n                    <Col componentClass={ControlLabel} sm={2}>{this.data.buildingNames[id]} level</Col>\r\n                    <Col sm={10}>\r\n                        <FormControl id={`${id}-level`} componentClass=\"select\" value={this.state.level[id]}\r\n                                     onChange={this.handleChange}>\r\n                            <option value=\"0\">-</option>\r\n                            {levels.map(level => {\r\n                                return <option key={level}>{level}</option>\r\n                            })}\r\n                        </FormControl>\r\n                    </Col>\r\n                </FormGroup>\r\n                <FormGroup>\r\n                    <Col componentClass={ControlLabel} sm={2}>Used {this.data.resourceNames[id]}</Col>\r\n                    <Col sm={10}>\r\n                        <FormControl type=\"text\" disabled value={used}/>\r\n                    </Col>\r\n                </FormGroup>\r\n                <FormGroup>\r\n                    <Col componentClass={ControlLabel} sm={2}>Owned {this.data.resourceNames[id]}</Col>\r\n                    <Col sm={10}>\r\n                        <FormControl id={`${id}-materials`} type=\"number\" value={this.state.materials[id]}\r\n                                     min=\"0\" onChange={this.handleChange} onFocus={this.selectAll}/>\r\n                    </Col>\r\n                </FormGroup>\r\n                <FormGroup>\r\n                    <Col componentClass={ControlLabel} sm={2}>Used gems</Col>\r\n                    <Col sm={10}>\r\n                        <InputGroup>\r\n                            <FormControl type=\"text\" disabled value={usedGems}/>\r\n                            <InputGroup.Addon>\r\n                                <OverlayTrigger placement=\"top\" trigger=\"click\" rootClose overlay={<Popover id=\"used-gems-explanation\" title={`Used gems: ${usedGems}`}>\r\n                                        {usedGemsExplanation}\r\n                                    </Popover>}>\r\n                                    <Glyphicon style={{cursor: 'pointer'}} glyph=\"info-sign\"/>\r\n                                </OverlayTrigger>\r\n                            </InputGroup.Addon>\r\n                        </InputGroup>\r\n                    </Col>\r\n                </FormGroup>\r\n                <FormGroup>\r\n                    <Col componentClass={ControlLabel} sm={2}>Remaining {this.data.resourceNames[id]}</Col>\r\n                    <Col sm={10}>\r\n                        <FormControl type=\"text\" disabled value={remaining}/>\r\n                    </Col>\r\n                </FormGroup>\r\n                <FormGroup>\r\n                    <Col componentClass={ControlLabel} sm={2}>Remaining gems</Col>\r\n                    <Col sm={10}>\r\n                        <InputGroup>\r\n                            <FormControl type=\"text\" disabled value={remainingGems}/>\r\n                            <InputGroup.Addon>\r\n                                <OverlayTrigger placement=\"top\" trigger=\"click\" rootClose overlay={<Popover id=\"remaining-gems-explanation\" title={`Remaining gems: ${remainingGems}`}>\r\n                                        {remainingGemsExplanation}\r\n                                    </Popover>}>\r\n                                    <Glyphicon style={{cursor: 'pointer'}} glyph=\"info-sign\"/>\r\n                                </OverlayTrigger>\r\n                            </InputGroup.Addon>\r\n                        </InputGroup>\r\n                    </Col>\r\n                </FormGroup>\r\n            </div>);\r\n        });\r\n\r\n        return (\r\n\r\n            <div>\r\n                <Navbar location={this.props.location.pathname}/>\r\n                <Grid>\r\n                    <Form horizontal>\r\n                        {formGroups}\r\n                        <h3>Total</h3>\r\n                        <Row>\r\n                            <Col md={6}>\r\n                                <Panel>\r\n                                    <Panel.Heading>\r\n                                        <Panel.Title componentClass=\"h4\">Used gems</Panel.Title>\r\n                                    </Panel.Heading>\r\n                                    <Panel.Body>\r\n                                        {totalUsedGems}\r\n                                    </Panel.Body>\r\n                                </Panel>\r\n                            </Col>\r\n                            <Col md={6}>\r\n                                <Panel>\r\n                                    <Panel.Heading>\r\n                                        <Panel.Title componentClass=\"h4\">Remaining gems</Panel.Title>\r\n                                    </Panel.Heading>\r\n                                    <Panel.Body>\r\n                                        {totalRemainingGems}\r\n                                    </Panel.Body>\r\n                                </Panel>\r\n                            </Col>\r\n                        </Row>\r\n                    </Form>\r\n                    <Footer/>\r\n                </Grid>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n;","//TODO en canviar estat, el label no surt on toca\r\n\r\nimport React, {Component} from 'react';\r\nimport {\r\n    Button,\r\n    Col,\r\n    ControlLabel,\r\n    Form,\r\n    FormControl,\r\n    FormGroup,\r\n    Glyphicon,\r\n    Grid,\r\n    InputGroup, ListGroup, ListGroupItem, OverlayTrigger, Panel, Popover, Row\r\n} from 'react-bootstrap';\r\nimport Inputmask from 'inputmask';\r\nimport update from 'immutability-helper';\r\n\r\nimport Navbar from './Navbar';\r\nimport Footer from './Footer';\r\nimport './App.css';\r\n\r\nimport $ from 'jquery';\r\n\r\nimport PriorityQueue from 'js-priority-queue';\r\n\r\nwindow.jQuery = window.$ = $;\r\nrequire('bootstrap');\r\n\r\nexport default class Gyms extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.data = {\r\n            time: { // in minutes\r\n                empty: 120,\r\n                grey: 20,\r\n                green: 30,\r\n                blue: 40,\r\n                purple: 50,\r\n                gold: 60\r\n            },\r\n            // empty: 10; 1st: 10; 2nd: 7; 3rd: 6; 4th-5th: 5; 6th-9th: 4; 10th-20th: 3; 21st+: 2\r\n            exp: [10, 10, 7, 6, 5, 5, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2],\r\n            colors: ['gold', 'purple', 'blue', 'green', 'grey'],\r\n            iterations: 1000\r\n        };\r\n        let defaults = JSON.parse(localStorage.getItem('gyms'));\r\n        if (defaults === null) {\r\n            defaults = {\r\n                expBoost: 0,\r\n                timeBoost: this.convertMinutesToText(0),\r\n                heroes: {\r\n                    grey: 0,\r\n                    green: 0,\r\n                    blue: 0,\r\n                    purple: 0,\r\n                    gold: 0\r\n                },\r\n                monsters: [{\r\n                    grey: 0,\r\n                    green: 0,\r\n                    blue: 0,\r\n                    purple: 0,\r\n                    gold: 0\r\n                }]\r\n            };\r\n        }\r\n        this.state = {...defaults};\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.optimalGym = this.optimalGym.bind(this);\r\n        this.selectAll = this.selectAll.bind(this);\r\n    }\r\n\r\n    convertMinutesToText(minutes) {\r\n        let seconds = minutes * 60;\r\n        seconds = Math.round(seconds);\r\n        let h = Math.floor(seconds / 3600);\r\n        seconds -= h * 3600;\r\n        let m = Math.floor(seconds / 60);\r\n        seconds -= m * 60;\r\n        let s = seconds;\r\n\r\n        if (h < 10) h = '0' + h;\r\n        if (m < 10) m = '0' + m;\r\n        if (s < 10) s = '0' + s;\r\n\r\n        return h + ':' + m + ':' + s;\r\n    }\r\n\r\n    convertTextToMinutes(text) {\r\n        let matches = /(\\d+):(\\d{2}):(\\d{2})/.exec(text);\r\n        if (matches) {\r\n            return (matches[1] * 3600 + matches[2] * 60 + matches[3] * 1) / 60;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        Inputmask().mask(document.querySelectorAll(\"input\"));\r\n    }\r\n\r\n    componentWillUpdate(nextProps, nextState) {\r\n        localStorage.setItem('gyms', JSON.stringify(nextState));\r\n    }\r\n\r\n    handleChange(event) {\r\n        let split = event.target.id.split('-');\r\n        let value = event.target.type === 'number' ? +event.target.value : event.target.value;\r\n        if (split.length === 1) {\r\n            this.setState({\r\n                [event.target.id]: value\r\n            });\r\n        } else if (split.length === 2) {\r\n            this.setState(update(this.state, {\r\n                [split[0]]: {\r\n                    [split[1]]: {\r\n                        $set: value\r\n                    }\r\n                }\r\n            }));\r\n        }\r\n    }\r\n\r\n    selectAll(event) {\r\n        event.target.select();\r\n    }\r\n    \r\n    optimalGym(nGyms, allHeroes) {\r\n\r\n        let clone = data => {\r\n            return JSON.parse(JSON.stringify(data));\r\n        };\r\n\r\n        let countHeroes = function (heroes) {\r\n            return this.data.colors.reduce((acc, color) => {\r\n                return acc + heroes[color];\r\n            }, 0);\r\n        }.bind(this);\r\n\r\n        let sumTime = function (heroes) {\r\n            return this.data.colors.reduce((acc, color) => {\r\n                return acc + heroes[color] * this.data.time[color];\r\n            }, 0);\r\n        }.bind(this);\r\n\r\n        let compare = (a, b) => {\r\n            let difHeroes = a.difHeroes - b.difHeroes;\r\n            if (difHeroes !== 0) {\r\n                return difHeroes;\r\n            } else {\r\n                return a.difTime - b.difTime;\r\n            }\r\n        };\r\n\r\n        let branch = (node) => {\r\n            let nodes = [];\r\n\r\n            // Choose hero\r\n            let color = this.data.colors.find(color => node.heroes[color] > 0);\r\n            node.heroes[color]--;\r\n\r\n            // We create nodes: in each of these a different monster is trained by the hero\r\n            for (let i = 0; i < node.monsters.length; i++) {\r\n                let newNode = clone(node);\r\n                let monster = newNode.monsters[i];\r\n                monster[color]++;\r\n                monster.total++;\r\n                monster.time += this.data.time[color];\r\n                monster.exp += monster.total < this.data.exp.length ? this.data.exp[monster.total] : this.data.exp[this.data.exp.length - 1];\r\n\r\n                if (monster.total > heuristicHeroes || monster.time > heuristicTime) {\r\n                    continue;\r\n                }\r\n\r\n                let hash = getHash(newNode);\r\n                if (visitedNodes[hash]) {\r\n                    continue;\r\n                }\r\n                visitedNodes[hash] = true;\r\n\r\n                let minHeroes = Number.MAX_VALUE;\r\n                let maxHeroes = Number.MIN_VALUE;\r\n                let minTime = Number.MAX_VALUE;\r\n                let maxTime = Number.MIN_VALUE;\r\n                newNode.monsters.forEach(m => {\r\n                    if (m.total < minHeroes)\r\n                        minHeroes = m.total;\r\n                    if (m.total > maxHeroes)\r\n                        maxHeroes = m.total;\r\n                    if (m.time < minTime)\r\n                        minTime = m.time;\r\n                    if (m.time > maxTime)\r\n                        maxTime = m.time;\r\n                });\r\n                newNode.difHeroes = maxHeroes - minHeroes;\r\n                newNode.difTime = maxTime - minTime;\r\n\r\n                nodes.push(newNode);\r\n            }\r\n\r\n            return nodes;\r\n        };\r\n\r\n        // Calculates a unique hash for a given state\r\n        let getHash = function (state) {\r\n            let hash = 0;\r\n            let acc = 1;\r\n\r\n            this.data.colors.forEach(c => {\r\n                if (this.state.heroes[c] > 0) {\r\n                    state.monsters.forEach(m => {\r\n                        hash += m[c] * acc;\r\n                        acc *= this.state.heroes[c];\r\n                    });\r\n                }\r\n            });\r\n\r\n            return hash;\r\n        }.bind(this);\r\n\r\n        let queue = new PriorityQueue({comparator: compare});\r\n        let visitedNodes = {};\r\n\r\n        let totalHeroes = countHeroes(allHeroes);\r\n        let heuristicHeroes = Math.ceil(totalHeroes / nGyms);\r\n        let heuristicTime = Math.ceil(sumTime(allHeroes) / nGyms) + 60; //TODO this is a hack.\r\n        // We need to keep in mind that we may divide the heroes in a way that the difference between monsters is not small\r\n        // Yes, it'll be of a single hero at most, but how much is that hero worth? No idea\r\n\r\n        let s0 = {\r\n            heroes: clone(allHeroes),\r\n            monsters: [],\r\n            difHeroes: 0,\r\n            difTime: 0\r\n        };\r\n        for (let nMon = 0; nMon < nGyms; nMon++) {\r\n            s0.monsters.push({\r\n                grey: 0,\r\n                green: 0,\r\n                blue: 0,\r\n                purple: 0,\r\n                gold: 0,\r\n                total: 0,\r\n                time: 0,\r\n                exp: 0\r\n            });\r\n        }\r\n\r\n        queue.queue(s0);\r\n\r\n        let best = clone(s0);\r\n        best.difHeroes = Number.MAX_VALUE;\r\n        best.difTime = Number.MAX_VALUE;\r\n\r\n        let iterations = 0;\r\n        while (queue.length > 0 && ++iterations < this.data.iterations) {\r\n            let node = queue.dequeue();\r\n            if (countHeroes(node.heroes) === 0) {\r\n                // It's a leaf: a possible solution\r\n                if (compare(best, node) > 0) {\r\n                    // We found a better solution\r\n                    best = node;\r\n                    //TODO there are cases in which no perfect solution can be found. Maybe we can know the minimum difTime and use it here.\r\n                    if (node.difHeroes === 0 && node.difTime === 0) {\r\n                        // Perfect solution\r\n                        break;\r\n                    }\r\n                }\r\n            } else {\r\n                let nodes = branch(node);\r\n                nodes.forEach(n => {\r\n                    queue.queue(n);\r\n                });\r\n            }\r\n        }\r\n\r\n        return best.monsters;\r\n    }\r\n\r\n    render() {\r\n\r\n        let calcMonsterExpH = function(monster) {\r\n            return Math.round((monster.exp + this.data.exp[0]) * (100 + (+this.state.expBoost)));\r\n        }.bind(this);\r\n\r\n        let calcMonsterExp = function(monster) {\r\n            return Math.round((monster.exp + this.data.exp[0]) * (100 + (+this.state.expBoost)) * (monster.time + this.data.time.empty + this.convertTextToMinutes(this.state.timeBoost)) / 60);\r\n        }.bind(this);\r\n\r\n        let gyms = [];\r\n\r\n        for (let nGyms = 1; nGyms <= 6; nGyms++) {\r\n            let monsters = this.optimalGym(nGyms, this.state.heroes);\r\n\r\n            let totalExpH = monsters.reduce((acc, m) => acc + calcMonsterExpH(m), 0);\r\n\r\n            let listGroupItems = [];\r\n            monsters.forEach((monster, i) => {\r\n                listGroupItems.push(<ListGroup>\r\n                    <ListGroupItem>\r\n                        <span className=\"hero hero-gold\">{monster.gold}</span>\r\n                        <span className=\"hero hero-purple\">{monster.purple}</span>\r\n                        <span className=\"hero hero-blue\">{monster.blue}</span>\r\n                        <span className=\"hero hero-green\">{monster.green}</span>\r\n                        <span className=\"hero hero-grey\">{monster.grey}</span>\r\n                    </ListGroupItem>\r\n                    <ListGroupItem>\r\n                        {this.convertMinutesToText(monster.time + this.data.time.empty + this.convertTextToMinutes(this.state.timeBoost))}\r\n                    </ListGroupItem>\r\n                    <ListGroupItem>\r\n                            <span>{calcMonsterExpH(monster)} exp/h</span>, <span>{calcMonsterExp(monster)} exp</span>\r\n                    </ListGroupItem>\r\n                </ListGroup>);\r\n            });\r\n\r\n            gyms.push(<Col md={4} key={nGyms}>\r\n                <Panel>\r\n                    <Panel.Heading>\r\n                        <Panel.Title componentClass=\"h4\">{nGyms} gym{nGyms > 1 ? 's' : ''} ({totalExpH} exp/h)</Panel.Title>\r\n                    </Panel.Heading>\r\n                    <Panel.Body>\r\n                        {listGroupItems}\r\n                    </Panel.Body>\r\n                </Panel>\r\n            </Col>)\r\n        }\r\n\r\n        return (\r\n\r\n            <div>\r\n                <Navbar location={this.props.location.pathname}/>\r\n                <Grid>\r\n                    <Form horizontal>\r\n                        <h3>Data</h3>\r\n                        <FormGroup controlId=\"expBoost\">\r\n                            <Col componentClass={ControlLabel} sm={2}>\r\n                                Training EXP Boost\r\n                            </Col>\r\n                            <Col sm={10}>\r\n                                <InputGroup>\r\n                                    <InputGroup.Addon>+</InputGroup.Addon>\r\n                                    <FormControl type=\"text\" value={this.state['expBoost']}\r\n                                                 onChange={this.handleChange} onFocus={this.selectAll}\r\n                                                 data-inputmask-alias=\"numeric\"\r\n                                                 data-inputmask-autogroup=\"true\"\r\n                                                 data-inputmask-unmaskasnumber=\"true\"\r\n                                                 data-inputmask-min=\"0\"\r\n                                                 data-inputmask-placeholder=\"0\"\r\n                                                 data-inputmask-rightalign=\"false\"/>\r\n                                    <InputGroup.Addon>%</InputGroup.Addon>\r\n                                </InputGroup>\r\n                            </Col>\r\n                        </FormGroup>\r\n                        <FormGroup controlId=\"timeBoost\">\r\n                            <Col componentClass={ControlLabel} sm={2}>\r\n                                Training Time Boost\r\n                            </Col>\r\n                            <Col sm={10}>\r\n                                <InputGroup>\r\n                                    <FormControl type=\"text\" value={this.state['timeBoost']}\r\n                                                 onChange={this.handleChange}\r\n                                                 data-inputmask-alias=\"datetime\"\r\n                                                 data-inputmask-inputformat=\"HHH:MM:ss\"\r\n                                                 data-inputmask-placeholder=\"0\"/>\r\n                                    <InputGroup.Addon>\r\n                                        <Glyphicon glyph=\"time\"/>\r\n                                    </InputGroup.Addon>\r\n                                </InputGroup>\r\n                            </Col>\r\n                        </FormGroup>\r\n                        <FormGroup>\r\n                            <Col componentClass={ControlLabel} sm={2}>\r\n                                Heroes\r\n                            </Col>\r\n                            <Col sm={10}>\r\n                                <Row>\r\n                                    <Col md={2}>\r\n                                        <InputGroup>\r\n                                            <InputGroup.Addon className=\"hero-gold\">Gold</InputGroup.Addon>\r\n                                            <FormControl id=\"heroes-gold\" type=\"number\" min=\"0\"\r\n                                                         value={this.state.heroes.gold}\r\n                                                         onChange={this.handleChange} onFocus={this.selectAll}/>\r\n                                        </InputGroup>\r\n                                    </Col>\r\n                                    <Col md={2}>\r\n                                        <InputGroup>\r\n                                            <InputGroup.Addon className=\"hero-purple\">Purple</InputGroup.Addon>\r\n                                            <FormControl id=\"heroes-purple\" type=\"number\" min=\"0\"\r\n                                                         value={this.state.heroes.purple}\r\n                                                         onChange={this.handleChange} onFocus={this.selectAll}/>\r\n                                        </InputGroup>\r\n                                    </Col>\r\n                                    <Col md={2}>\r\n                                        <InputGroup>\r\n                                            <InputGroup.Addon className=\"hero-blue\">Blue</InputGroup.Addon>\r\n                                            <FormControl id=\"heroes-blue\" type=\"number\" min=\"0\"\r\n                                                         value={this.state.heroes.blue}\r\n                                                         onChange={this.handleChange} onFocus={this.selectAll}/>\r\n                                        </InputGroup>\r\n                                    </Col>\r\n                                    <Col md={2}>\r\n                                        <InputGroup>\r\n                                            <InputGroup.Addon className=\"hero-green\">Green</InputGroup.Addon>\r\n                                            <FormControl id=\"heroes-green\" type=\"number\" min=\"0\"\r\n                                                         value={this.state.heroes.green}\r\n                                                         onChange={this.handleChange} onFocus={this.selectAll}/>\r\n                                        </InputGroup>\r\n                                    </Col>\r\n                                    <Col md={2}>\r\n                                        <InputGroup>\r\n                                            <InputGroup.Addon className=\"hero-grey\">Grey</InputGroup.Addon>\r\n                                            <FormControl id=\"heroes-grey\" type=\"number\" min=\"0\"\r\n                                                         value={this.state.heroes.grey}\r\n                                                         onChange={this.handleChange} onFocus={this.selectAll}/>\r\n                                        </InputGroup>\r\n                                    </Col>\r\n                                    <Col md={2}>\r\n                                        <InputGroup>\r\n                                            <InputGroup.Addon>Total</InputGroup.Addon>\r\n                                            <FormControl disabled type=\"text\"\r\n                                                         value={this.state.heroes.grey + this.state.heroes.green + this.state.heroes.blue + this.state.heroes.purple + this.state.heroes.gold}/>\r\n                                        </InputGroup>\r\n                                    </Col>\r\n                                </Row>\r\n                            </Col>\r\n                        </FormGroup>\r\n                        <h3>Example builds <OverlayTrigger placement=\"top\" trigger=\"click\" rootClose\r\n                                                           overlay={<Popover id=\"calculation\">\r\n                                                               This calculation may be imprecise. Finding a perfect\r\n                                                               solution would take forever.\r\n                                                           </Popover>}>\r\n                            <Glyphicon style={{cursor: 'pointer'}} glyph=\"info-sign\"/>\r\n                        </OverlayTrigger></h3>\r\n                        <Row>\r\n                            {gyms}\r\n                        </Row>\r\n                    </Form>\r\n                    <Footer/>\r\n                </Grid>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, {Component} from 'react';\nimport {BrowserRouter, Route, Switch} from 'react-router-dom';\n\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/css/bootstrap-theme.min.css';\n\nimport Home from './Home'\nimport Gathering from './Gathering'\nimport Buildings from './Buildings'\nimport Gyms from './Gyms'\n\nclass App extends Component {\n    render() {\n        return (<BrowserRouter basename={process.env.PUBLIC_URL}>\n            <Switch>\n                <Route exact path=\"/\" component={Home}/>\n                <Route path=\"/gathering\" component={Gathering}/>\n                <Route path=\"/buildings\" component={Buildings}/>\n                <Route path=\"/gyms\" component={Gyms}/>\n            </Switch>\n        </BrowserRouter>);\n    }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}